{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","diary","JSON","parse","window","localStorage","getItem","dateObject","Date","date","getFullYear","getMonth","getDate","useState","today","Array","rules","length","keys","map","e","checkedList","setCheckedList","updateDiary","checklist","retrieve","setItem","stringify","useEffect","CardCheckList","rule","checklistIndex","Card","CardContent","CardActions","FormControlLabel","control","Checkbox","color","checked","onChange","i","label","Grid","container","xs","spacing","justify","alignItems","item","r","md","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g9NAAAA,EAAOC,QAAU,IAA0B,kC,8LC6E5BC,MA7Df,WACE,IAAMC,EAAQC,KAAKC,MAAMC,OAAOC,aAAaC,QAJ7B,eAIoD,KAC9DC,EAAa,IAAIC,KACjBC,EAAOF,EAAWG,cAAc,KAAKH,EAAWI,WAAW,GAAG,IAAIJ,EAAWK,UAHtE,EAIaC,mBAASJ,GAJtB,mBAINK,EAJM,aAKyBD,mBAAS,YAAIE,MAAMC,EAAMC,QAAQC,QAAQC,KAAI,SAAAC,GAAC,OAAInB,EAAMa,IAAUb,EAAMa,GAAOM,KAAM,OAL9G,mBAKNC,EALM,KAKOC,EALP,KAaPC,EAAc,SAACd,EAAMe,GACzB,IACE,IAAMC,EAAWrB,OAAOC,aAAaC,QAlBzB,aAmBNL,EAAQwB,GAAYvB,KAAKC,MAAMsB,IAAa,KAClDxB,EAAMQ,GAAQe,EACdpB,OAAOC,aAAaqB,QArBR,YAqB2BxB,KAAKyB,UAAU1B,IACtD,MAAMmB,GACNhB,OAAOC,aAAaqB,QAvBR,YAuB2BxB,KAAKyB,UAAU,OAK1DC,qBAAU,WACRL,EAAYT,EAAOO,KAClB,CAACA,IAEJO,qBAAU,WACRL,EAAYT,EAAOO,KAClB,IAEH,IAAMQ,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,eAAT,OAA8B,kBAACC,EAAA,EAAD,KAClD,kBAACC,EAAA,EAAD,aACSF,GAET,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,UAAUC,QAASlB,EAAYU,GAAiBS,SAAU,SAACpB,GAAD,OAhCvFC,EAD2BoB,EAiCmFV,IAhC5FV,EAAYoB,QAC9BnB,EAAe,YACVD,IAHc,IAAQoB,KAkCvBC,MAAOZ,OAIb,OACE,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAAIC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACJ,GAAI,GACf,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAAIC,QAAS,GAE7B9B,EAAMG,KAAI,SAAC+B,EAAGT,GAAJ,OAAU,kBAACE,EAAA,EAAD,CAAME,GAAI,GAAIM,GAAI,EAAGF,MAAI,GAAC,kBAACpB,EAAD,CAC5CuB,IAAKX,EACLV,eAAgBU,EAChBX,KAAMoB,YCxDEG,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04ab9271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport logo from './logo.svg';\nimport './App.css';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport rules from './data/dizigui.json'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\n\nconst DIARY_KEY = 'DIARY_KEY';\n\n\nfunction App() {\n  const diary = JSON.parse(window.localStorage.getItem(DIARY_KEY)) || \"{}\";\n  const dateObject = new Date();\n  const date = dateObject.getFullYear()+'-'+(dateObject.getMonth()+1)+'-'+dateObject.getDate();\n  const [today, setToday] = useState(date);\n  const [checkedList, setCheckedList] = useState([...Array(rules.length).keys()].map(e => diary[today] && diary[today][e] || false));\n  const handleChange = (event, i) => {\n    checkedList[i] = !checkedList[i];\n    setCheckedList([\n      ...checkedList,\n    ]);\n  };\n\n  const updateDiary = (date, checklist) => {\n    try {\n      const retrieve = window.localStorage.getItem(DIARY_KEY);\n      const diary = retrieve && JSON.parse(retrieve) || \"{}\";\n      diary[date] = checklist;\n      window.localStorage.setItem(DIARY_KEY, JSON.stringify(diary))\n    } catch(e) {\n      window.localStorage.setItem(DIARY_KEY, JSON.stringify({}))\n    }\n\n  }\n\n  useEffect(() => {\n    updateDiary(today, checkedList)\n  }, [checkedList]);\n\n  useEffect(() => {\n    updateDiary(today, checkedList)\n  }, []);\n\n  const CardCheckList = ({ rule, checklistIndex }) => <Card>\n    <CardContent>\n      Card { checklistIndex }\n    </CardContent>\n    <CardActions>\n      <FormControlLabel \n        control={<Checkbox color=\"primary\" checked={checkedList[checklistIndex]} onChange={(e) => handleChange(e, checklistIndex)} />}\n        label={rule}\n      />\n    </CardActions>\n    </Card>\n  return (\n    <Grid container xs={12} spacing={2} justify=\"center\" alignItems=\"center\" >\n      <Grid item xs={9}>\n      <Grid container xs={12} spacing={2}>\n        {\n          rules.map((r, i) => <Grid xs={12} md={4} item><CardCheckList \n            key={i}\n            checklistIndex={i}\n            rule={r}\n          /></Grid>)\n        }\n        </Grid>\n        </Grid>\n      </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}